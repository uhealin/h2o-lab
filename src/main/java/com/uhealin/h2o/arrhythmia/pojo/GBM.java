package com.uhealin.h2o.arrhythmia.pojo;


/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-03-16T15:05:40.227+08:00
  3.19.0.4224
  
  Standalone prediction code with sample test data for GBMModel named GBM

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.0.125:54323/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.0.125:54323/3/Models.java/GBM > GBM.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m GBM.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="GBM", algorithm="gbm")
public class GBM extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 262; }
  public int nclasses() { return 1; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_GBM.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C2 */ null,
    /* C3 */ null,
    /* C4 */ null,
    /* C5 */ null,
    /* C6 */ null,
    /* C7 */ null,
    /* C8 */ null,
    /* C9 */ null,
    /* C10 */ null,
    /* C11 */ null,
    /* C12 */ null,
    /* C13 */ null,
    /* C14 */ null,
    /* C15 */ null,
    /* C16 */ null,
    /* C17 */ null,
    /* C18 */ null,
    /* C19 */ null,
    /* C21 */ null,
    /* C22 */ null,
    /* C23 */ null,
    /* C24 */ null,
    /* C25 */ null,
    /* C26 */ null,
    /* C27 */ null,
    /* C28 */ null,
    /* C29 */ null,
    /* C30 */ null,
    /* C31 */ null,
    /* C32 */ null,
    /* C33 */ null,
    /* C34 */ null,
    /* C35 */ null,
    /* C36 */ null,
    /* C37 */ null,
    /* C38 */ null,
    /* C39 */ null,
    /* C40 */ null,
    /* C41 */ null,
    /* C42 */ null,
    /* C43 */ null,
    /* C44 */ null,
    /* C45 */ null,
    /* C46 */ null,
    /* C47 */ null,
    /* C48 */ null,
    /* C49 */ null,
    /* C50 */ null,
    /* C51 */ null,
    /* C52 */ null,
    /* C53 */ null,
    /* C54 */ null,
    /* C55 */ null,
    /* C56 */ null,
    /* C57 */ null,
    /* C58 */ null,
    /* C59 */ null,
    /* C60 */ null,
    /* C61 */ null,
    /* C62 */ null,
    /* C63 */ null,
    /* C64 */ null,
    /* C65 */ null,
    /* C66 */ null,
    /* C67 */ null,
    /* C69 */ null,
    /* C71 */ null,
    /* C72 */ null,
    /* C73 */ null,
    /* C74 */ null,
    /* C75 */ null,
    /* C76 */ null,
    /* C77 */ null,
    /* C78 */ null,
    /* C79 */ null,
    /* C80 */ null,
    /* C81 */ null,
    /* C82 */ null,
    /* C83 */ null,
    /* C85 */ null,
    /* C86 */ null,
    /* C87 */ null,
    /* C88 */ null,
    /* C89 */ null,
    /* C90 */ null,
    /* C91 */ null,
    /* C92 */ null,
    /* C93 */ null,
    /* C94 */ null,
    /* C95 */ null,
    /* C96 */ null,
    /* C97 */ null,
    /* C98 */ null,
    /* C99 */ null,
    /* C100 */ null,
    /* C101 */ null,
    /* C102 */ null,
    /* C103 */ null,
    /* C104 */ null,
    /* C105 */ null,
    /* C106 */ null,
    /* C107 */ null,
    /* C108 */ null,
    /* C109 */ null,
    /* C110 */ null,
    /* C111 */ null,
    /* C112 */ null,
    /* C113 */ null,
    /* C114 */ null,
    /* C115 */ null,
    /* C116 */ null,
    /* C117 */ null,
    /* C118 */ null,
    /* C119 */ null,
    /* C120 */ null,
    /* C121 */ null,
    /* C122 */ null,
    /* C123 */ null,
    /* C124 */ null,
    /* C125 */ null,
    /* C126 */ null,
    /* C127 */ null,
    /* C128 */ null,
    /* C129 */ null,
    /* C130 */ null,
    /* C131 */ null,
    /* C134 */ null,
    /* C135 */ null,
    /* C136 */ null,
    /* C137 */ null,
    /* C138 */ null,
    /* C139 */ null,
    /* C141 */ null,
    /* C143 */ null,
    /* C145 */ null,
    /* C147 */ null,
    /* C148 */ null,
    /* C149 */ null,
    /* C150 */ null,
    /* C151 */ null,
    /* C153 */ null,
    /* C154 */ null,
    /* C155 */ null,
    /* C156 */ null,
    /* C159 */ null,
    /* C160 */ null,
    /* C161 */ null,
    /* C162 */ null,
    /* C163 */ null,
    /* C164 */ null,
    /* C166 */ null,
    /* C167 */ null,
    /* C168 */ null,
    /* C169 */ null,
    /* C170 */ null,
    /* C171 */ null,
    /* C172 */ null,
    /* C173 */ null,
    /* C174 */ null,
    /* C175 */ null,
    /* C176 */ null,
    /* C177 */ null,
    /* C178 */ null,
    /* C179 */ null,
    /* C180 */ null,
    /* C181 */ null,
    /* C182 */ null,
    /* C183 */ null,
    /* C184 */ null,
    /* C185 */ null,
    /* C186 */ null,
    /* C187 */ null,
    /* C188 */ null,
    /* C189 */ null,
    /* C190 */ null,
    /* C191 */ null,
    /* C192 */ null,
    /* C193 */ null,
    /* C194 */ null,
    /* C195 */ null,
    /* C196 */ null,
    /* C197 */ null,
    /* C198 */ null,
    /* C199 */ null,
    /* C200 */ null,
    /* C201 */ null,
    /* C202 */ null,
    /* C203 */ null,
    /* C204 */ null,
    /* C206 */ null,
    /* C207 */ null,
    /* C208 */ null,
    /* C209 */ null,
    /* C210 */ null,
    /* C211 */ null,
    /* C212 */ null,
    /* C213 */ null,
    /* C214 */ null,
    /* C215 */ null,
    /* C216 */ null,
    /* C217 */ null,
    /* C218 */ null,
    /* C219 */ null,
    /* C220 */ null,
    /* C221 */ null,
    /* C222 */ null,
    /* C223 */ null,
    /* C224 */ null,
    /* C225 */ null,
    /* C226 */ null,
    /* C227 */ null,
    /* C228 */ null,
    /* C229 */ null,
    /* C230 */ null,
    /* C231 */ null,
    /* C232 */ null,
    /* C233 */ null,
    /* C234 */ null,
    /* C235 */ null,
    /* C236 */ null,
    /* C237 */ null,
    /* C238 */ null,
    /* C239 */ null,
    /* C240 */ null,
    /* C241 */ null,
    /* C242 */ null,
    /* C243 */ null,
    /* C244 */ null,
    /* C245 */ null,
    /* C246 */ null,
    /* C247 */ null,
    /* C248 */ null,
    /* C249 */ null,
    /* C250 */ null,
    /* C251 */ null,
    /* C252 */ null,
    /* C253 */ null,
    /* C254 */ null,
    /* C255 */ null,
    /* C256 */ null,
    /* C257 */ null,
    /* C258 */ null,
    /* C259 */ null,
    /* C260 */ null,
    /* C261 */ null,
    /* C262 */ null,
    /* C263 */ null,
    /* C264 */ null,
    /* C266 */ null,
    /* C267 */ null,
    /* C268 */ null,
    /* C269 */ null,
    /* C270 */ null,
    /* C271 */ null,
    /* C272 */ null,
    /* C273 */ null,
    /* C274 */ null,
    /* C276 */ null,
    /* C277 */ null,
    /* C278 */ null,
    /* C279 */ null,
    /* C280 */ null,
    /* C1 */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {1.0};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {1.0};

  public GBM() { super(NAMES,DOMAINS,"C1"); }
  public String getUUID() { return Long.toString(8776988218678617060L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    GBM_Forest_0.score0(data,preds);
    GBM_Forest_1.score0(data,preds);
    GBM_Forest_2.score0(data,preds);
    GBM_Forest_3.score0(data,preds);
    GBM_Forest_4.score0(data,preds);
    GBM_Forest_5.score0(data,preds);
    GBM_Forest_6.score0(data,preds);
    GBM_Forest_7.score0(data,preds);
    GBM_Forest_8.score0(data,preds);
    GBM_Forest_9.score0(data,preds);
    GBM_Forest_10.score0(data,preds);
    GBM_Forest_11.score0(data,preds);
    GBM_Forest_12.score0(data,preds);
    GBM_Forest_13.score0(data,preds);
    GBM_Forest_14.score0(data,preds);
    GBM_Forest_15.score0(data,preds);
    GBM_Forest_16.score0(data,preds);
    GBM_Forest_17.score0(data,preds);
    GBM_Forest_18.score0(data,preds);
    GBM_Forest_19.score0(data,preds);
    preds[0] += 46.4712389380531;
    preds[0] = preds[0];
    return preds;
  }
}
// The class representing training column names
class NamesHolder_GBM implements java.io.Serializable {
  public static final String[] VALUES = new String[262];
  static {
    NamesHolder_GBM_0.fill(VALUES);
  }
  static final class NamesHolder_GBM_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C2";
      sa[1] = "C3";
      sa[2] = "C4";
      sa[3] = "C5";
      sa[4] = "C6";
      sa[5] = "C7";
      sa[6] = "C8";
      sa[7] = "C9";
      sa[8] = "C10";
      sa[9] = "C11";
      sa[10] = "C12";
      sa[11] = "C13";
      sa[12] = "C14";
      sa[13] = "C15";
      sa[14] = "C16";
      sa[15] = "C17";
      sa[16] = "C18";
      sa[17] = "C19";
      sa[18] = "C21";
      sa[19] = "C22";
      sa[20] = "C23";
      sa[21] = "C24";
      sa[22] = "C25";
      sa[23] = "C26";
      sa[24] = "C27";
      sa[25] = "C28";
      sa[26] = "C29";
      sa[27] = "C30";
      sa[28] = "C31";
      sa[29] = "C32";
      sa[30] = "C33";
      sa[31] = "C34";
      sa[32] = "C35";
      sa[33] = "C36";
      sa[34] = "C37";
      sa[35] = "C38";
      sa[36] = "C39";
      sa[37] = "C40";
      sa[38] = "C41";
      sa[39] = "C42";
      sa[40] = "C43";
      sa[41] = "C44";
      sa[42] = "C45";
      sa[43] = "C46";
      sa[44] = "C47";
      sa[45] = "C48";
      sa[46] = "C49";
      sa[47] = "C50";
      sa[48] = "C51";
      sa[49] = "C52";
      sa[50] = "C53";
      sa[51] = "C54";
      sa[52] = "C55";
      sa[53] = "C56";
      sa[54] = "C57";
      sa[55] = "C58";
      sa[56] = "C59";
      sa[57] = "C60";
      sa[58] = "C61";
      sa[59] = "C62";
      sa[60] = "C63";
      sa[61] = "C64";
      sa[62] = "C65";
      sa[63] = "C66";
      sa[64] = "C67";
      sa[65] = "C69";
      sa[66] = "C71";
      sa[67] = "C72";
      sa[68] = "C73";
      sa[69] = "C74";
      sa[70] = "C75";
      sa[71] = "C76";
      sa[72] = "C77";
      sa[73] = "C78";
      sa[74] = "C79";
      sa[75] = "C80";
      sa[76] = "C81";
      sa[77] = "C82";
      sa[78] = "C83";
      sa[79] = "C85";
      sa[80] = "C86";
      sa[81] = "C87";
      sa[82] = "C88";
      sa[83] = "C89";
      sa[84] = "C90";
      sa[85] = "C91";
      sa[86] = "C92";
      sa[87] = "C93";
      sa[88] = "C94";
      sa[89] = "C95";
      sa[90] = "C96";
      sa[91] = "C97";
      sa[92] = "C98";
      sa[93] = "C99";
      sa[94] = "C100";
      sa[95] = "C101";
      sa[96] = "C102";
      sa[97] = "C103";
      sa[98] = "C104";
      sa[99] = "C105";
      sa[100] = "C106";
      sa[101] = "C107";
      sa[102] = "C108";
      sa[103] = "C109";
      sa[104] = "C110";
      sa[105] = "C111";
      sa[106] = "C112";
      sa[107] = "C113";
      sa[108] = "C114";
      sa[109] = "C115";
      sa[110] = "C116";
      sa[111] = "C117";
      sa[112] = "C118";
      sa[113] = "C119";
      sa[114] = "C120";
      sa[115] = "C121";
      sa[116] = "C122";
      sa[117] = "C123";
      sa[118] = "C124";
      sa[119] = "C125";
      sa[120] = "C126";
      sa[121] = "C127";
      sa[122] = "C128";
      sa[123] = "C129";
      sa[124] = "C130";
      sa[125] = "C131";
      sa[126] = "C134";
      sa[127] = "C135";
      sa[128] = "C136";
      sa[129] = "C137";
      sa[130] = "C138";
      sa[131] = "C139";
      sa[132] = "C141";
      sa[133] = "C143";
      sa[134] = "C145";
      sa[135] = "C147";
      sa[136] = "C148";
      sa[137] = "C149";
      sa[138] = "C150";
      sa[139] = "C151";
      sa[140] = "C153";
      sa[141] = "C154";
      sa[142] = "C155";
      sa[143] = "C156";
      sa[144] = "C159";
      sa[145] = "C160";
      sa[146] = "C161";
      sa[147] = "C162";
      sa[148] = "C163";
      sa[149] = "C164";
      sa[150] = "C166";
      sa[151] = "C167";
      sa[152] = "C168";
      sa[153] = "C169";
      sa[154] = "C170";
      sa[155] = "C171";
      sa[156] = "C172";
      sa[157] = "C173";
      sa[158] = "C174";
      sa[159] = "C175";
      sa[160] = "C176";
      sa[161] = "C177";
      sa[162] = "C178";
      sa[163] = "C179";
      sa[164] = "C180";
      sa[165] = "C181";
      sa[166] = "C182";
      sa[167] = "C183";
      sa[168] = "C184";
      sa[169] = "C185";
      sa[170] = "C186";
      sa[171] = "C187";
      sa[172] = "C188";
      sa[173] = "C189";
      sa[174] = "C190";
      sa[175] = "C191";
      sa[176] = "C192";
      sa[177] = "C193";
      sa[178] = "C194";
      sa[179] = "C195";
      sa[180] = "C196";
      sa[181] = "C197";
      sa[182] = "C198";
      sa[183] = "C199";
      sa[184] = "C200";
      sa[185] = "C201";
      sa[186] = "C202";
      sa[187] = "C203";
      sa[188] = "C204";
      sa[189] = "C206";
      sa[190] = "C207";
      sa[191] = "C208";
      sa[192] = "C209";
      sa[193] = "C210";
      sa[194] = "C211";
      sa[195] = "C212";
      sa[196] = "C213";
      sa[197] = "C214";
      sa[198] = "C215";
      sa[199] = "C216";
      sa[200] = "C217";
      sa[201] = "C218";
      sa[202] = "C219";
      sa[203] = "C220";
      sa[204] = "C221";
      sa[205] = "C222";
      sa[206] = "C223";
      sa[207] = "C224";
      sa[208] = "C225";
      sa[209] = "C226";
      sa[210] = "C227";
      sa[211] = "C228";
      sa[212] = "C229";
      sa[213] = "C230";
      sa[214] = "C231";
      sa[215] = "C232";
      sa[216] = "C233";
      sa[217] = "C234";
      sa[218] = "C235";
      sa[219] = "C236";
      sa[220] = "C237";
      sa[221] = "C238";
      sa[222] = "C239";
      sa[223] = "C240";
      sa[224] = "C241";
      sa[225] = "C242";
      sa[226] = "C243";
      sa[227] = "C244";
      sa[228] = "C245";
      sa[229] = "C246";
      sa[230] = "C247";
      sa[231] = "C248";
      sa[232] = "C249";
      sa[233] = "C250";
      sa[234] = "C251";
      sa[235] = "C252";
      sa[236] = "C253";
      sa[237] = "C254";
      sa[238] = "C255";
      sa[239] = "C256";
      sa[240] = "C257";
      sa[241] = "C258";
      sa[242] = "C259";
      sa[243] = "C260";
      sa[244] = "C261";
      sa[245] = "C262";
      sa[246] = "C263";
      sa[247] = "C264";
      sa[248] = "C266";
      sa[249] = "C267";
      sa[250] = "C268";
      sa[251] = "C269";
      sa[252] = "C270";
      sa[253] = "C271";
      sa[254] = "C272";
      sa[255] = "C273";
      sa[256] = "C274";
      sa[257] = "C276";
      sa[258] = "C277";
      sa[259] = "C278";
      sa[260] = "C279";
      sa[261] = "C280";
    }
  }
}

class GBM_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_0_class_0.score0(fdata);
  }
}
class GBM_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C4 */] <45.5f ? 
        -8.945217f : 
         (Double.isNaN(data[195]) || data[195 /* C212 */] <6.354785f ? 
             (Double.isNaN(data[151]) || data[151 /* C167 */] <1.8351562f ? 
                 (Double.isNaN(data[223]) || data[223 /* C240 */] <0.69609374f ? 
                     (Double.isNaN(data[225]) || data[225 /* C242 */] <7.9875f ? 
                        1.8165231f : 
                        4.171672f) : 
                     (data[215 /* C232 */] <2.1234374f ? 
                        2.4986284f : 
                        -0.5452179f)) : 
                 (data[196 /* C213 */] <-1.0828125f ? 
                    -3.7628002f : 
                    1.3586283f)) : 
             (Double.isNaN(data[26]) || data[26 /* C29 */] <68.5f ? 
                 (data[151 /* C167 */] <0.9390625f ? 
                    -1.0132468f : 
                     (Double.isNaN(data[216]) || data[216 /* C233 */] <-8.795313f ? 
                        -4.547086f : 
                        -2.2773716f)) : 
                0.9697394f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class GBM_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_1_class_0.score0(fdata);
  }
}
class GBM_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C4 */] <51.5f ? 
        -4.9308133f : 
         (data[181 /* C197 */] <-1.3451172f ? 
             (data[206 /* C223 */] <-7.3828125f ? 
                 (Double.isNaN(data[5]) || data[5 /* C7 */] <379.5f ? 
                     (data[205 /* C222 */] <1.7125f ? 
                        -2.3892162f : 
                        -4.453279f) : 
                    -0.35487604f) : 
                 (data[176 /* C192 */] <0.9429687f ? 
                    2.45599f : 
                    -0.58902633f)) : 
             (Double.isNaN(data[26]) || data[26 /* C29 */] <64.5f ? 
                 (data[172 /* C188 */] <-2.0265625f ? 
                     (data[213 /* C230 */] <0.5828125f ? 
                        3.7016735f : 
                        1.243077f) : 
                     (Double.isNaN(data[170]) || data[170 /* C186 */] <0.6375f ? 
                        -1.1284868f : 
                        1.477697f)) : 
                 (Double.isNaN(data[252]) || data[252 /* C270 */] <-0.46914062f ? 
                    4.0786223f : 
                    1.2651248f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class GBM_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_2_class_0.score0(fdata);
  }
}
class GBM_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C4 */] <45.5f ? 
        -4.782408f : 
         (data[195 /* C212 */] <3.8478515f ? 
             (Double.isNaN(data[2]) || data[2 /* C4 */] <83.5f ? 
                 (Double.isNaN(data[164]) || data[164 /* C180 */] <0.13515624f ? 
                     (data[187 /* C203 */] <-0.8648437f ? 
                        2.6937907f : 
                        -0.080718316f) : 
                     (Double.isNaN(data[164]) || data[164 /* C180 */] <0.6450745f ? 
                        3.8147447f : 
                        1.1957972f)) : 
                -0.3995458f) : 
             (data[151 /* C167 */] <0.9632813f ? 
                 (Double.isNaN(data[205]) || data[205 /* C222 */] <1.171875f ? 
                     (Double.isNaN(data[242]) || data[242 /* C259 */] <27.0f ? 
                        0.20140678f : 
                        3.0840044f) : 
                    -0.4956297f) : 
                 (Double.isNaN(data[249]) || data[249 /* C267 */] <2.7445312f ? 
                     (Double.isNaN(data[205]) || data[205 /* C222 */] <1.675f ? 
                        0.5128205f : 
                        -1.7487701f) : 
                     (Double.isNaN(data[73]) || data[73 /* C78 */] <13.5f ? 
                        -1.6830103f : 
                        -3.7802699f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}


class GBM_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_3_class_0.score0(fdata);
  }
}
class GBM_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* C4 */] <58.5f ? 
         (data[187 /* C203 */] <-1.6495117f ? 
            -4.4521203f : 
             (data[190 /* C207 */] <-0.03984375f ? 
                1.9026474f : 
                 (data[213 /* C230 */] <0.86015624f ? 
                    -3.0445423f : 
                    -0.5356305f))) : 
         (Double.isNaN(data[173]) || data[173 /* C189 */] <23.726562f ? 
             (data[205 /* C222 */] <1.0558593f ? 
                 (data[210 /* C227 */] <-0.68125f ? 
                    -0.26557595f : 
                     (Double.isNaN(data[219]) || data[219 /* C236 */] <0.2375f ? 
                        2.4640687f : 
                        0.649934f)) : 
                 (data[213 /* C230 */] <0.0859375f ? 
                    2.2067604f : 
                     (data[4 /* C6 */] <156.5f ? 
                        -1.074505f : 
                        0.56495684f))) : 
            -1.3171678f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class GBM_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_4_class_0.score0(fdata);
  }
}
class GBM_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[176]) || data[176 /* C192 */] <2.6503906f ? 
         (data[241 /* C258 */] <2.6710937f ? 
             (data[2 /* C4 */] <63.5f ? 
                2.4914634f : 
                 (data[252 /* C270 */] <-0.46914062f ? 
                    1.8587751f : 
                     (data[220 /* C237 */] <1.9765625f ? 
                        1.1932453f : 
                        -0.9300782f))) : 
             (data[165 /* C181 */] <-3.1582031f ? 
                2.3361175f : 
                 (Double.isNaN(data[26]) || data[26 /* C29 */] <78.5f ? 
                     (Double.isNaN(data[223]) || data[223 /* C240 */] <1.2507813f ? 
                        -0.38997078f : 
                        -1.9539449f) : 
                    1.2718132f))) : 
        -3.2263718f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class GBM_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_5_class_0.score0(fdata);
  }
}
class GBM_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* C10 */] <87.5f ? 
         (data[210 /* C227 */] <-0.9554688f ? 
             (data[240 /* C257 */] <1.7476562f ? 
                0.6049485f : 
                 (Double.isNaN(data[236]) || data[236 /* C253 */] <-3.7273438f ? 
                    -2.098179f : 
                    -0.6856574f)) : 
             (data[203 /* C220 */] <0.28046876f ? 
                 (data[26 /* C29 */] <46.5f ? 
                    2.8688517f : 
                    0.8857168f) : 
                 (Double.isNaN(data[49]) || data[49 /* C52 */] <61.5f ? 
                     (Double.isNaN(data[221]) || data[221 /* C238 */] <-0.6515625f ? 
                        -0.44037974f : 
                        1.2405635f) : 
                     (Double.isNaN(data[123]) || data[123 /* C129 */] <30.5f ? 
                        2.1735997f : 
                        0.19614196f)))) : 
        -2.322637f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class GBM_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_6_class_0.score0(fdata);
  }
}
class GBM_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[205]) || data[205 /* C222 */] <1.8408203f ? 
         (Double.isNaN(data[7]) || data[7 /* C9 */] <102.0f ? 
             (data[212 /* C229 */] <-29.154297f ? 
                -1.1243737f : 
                 (data[246 /* C263 */] <-5.2992187f ? 
                    1.7435378f : 
                     (data[184 /* C200 */] <-0.2421875f ? 
                        1.0512078f : 
                        -0.49314964f))) : 
             (Double.isNaN(data[223]) || data[223 /* C240 */] <0.84101564f ? 
                 (data[183 /* C199 */] <-20.909374f ? 
                    2.9113216f : 
                    1.2121544f) : 
                -0.0049651624f)) : 
         (data[54 /* C57 */] <13.5f ? 
             (Double.isNaN(data[107]) || data[107 /* C113 */] <50.5f ? 
                1.2153594f : 
                -0.60906255f) : 
             (Double.isNaN(data[2]) || data[2 /* C4 */] <67.5f ? 
                -2.4231308f : 
                -0.36920843f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class GBM_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_7_class_0.score0(fdata);
  }
}
class GBM_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[243]) || data[243 /* C260 */] <0.14882812f ? 
         (Double.isNaN(data[72]) || data[72 /* C77 */] <77.5f ? 
             (data[175 /* C191 */] <-7.03125f ? 
                 (data[171 /* C187 */] <-0.509375f ? 
                    0.63166726f : 
                     (data[171 /* C187 */] <0.57021487f ? 
                        -2.0802636f : 
                        -0.36787367f)) : 
                 (data[182 /* C198 */] <-19.127344f ? 
                    1.4381256f : 
                     (Double.isNaN(data[11]) || data[11 /* C13 */] <19.5f ? 
                        0.846713f : 
                        -0.34328672f))) : 
            1.4482344f) : 
         (Double.isNaN(data[5]) || data[5 /* C7 */] <364.0f ? 
            -2.3090189f : 
            0.18464264f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class GBM_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_8_class_0.score0(fdata);
  }
}
class GBM_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[245]) || data[245 /* C262 */] <19.287354f ? 
         (Double.isNaN(data[254]) || data[254 /* C272 */] <12.952344f ? 
             (data[5 /* C7 */] <340.5f ? 
                 (Double.isNaN(data[229]) || data[229 /* C246 */] <0.334375f ? 
                    -0.29376733f : 
                    -1.7620428f) : 
                 (data[212 /* C229 */] <-24.160938f ? 
                     (data[120 /* C126 */] <36.5f ? 
                        -1.2999148f : 
                        0.07536332f) : 
                     (Double.isNaN(data[186]) || data[186 /* C202 */] <6.3375f ? 
                        0.32662636f : 
                        1.459778f))) : 
            1.7216816f) : 
        -1.4866447f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class GBM_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_9_class_0.score0(fdata);
  }
}
class GBM_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* C9 */] <102.5f ? 
         (data[157 /* C173 */] <-2.0625f ? 
             (data[156 /* C172 */] <4.3125f ? 
                0.48765266f : 
                 (data[191 /* C208 */] <7.0484376f ? 
                    -0.7925289f : 
                    -2.251224f)) : 
             (Double.isNaN(data[219]) || data[219 /* C236 */] <0.24980469f ? 
                 (data[215 /* C232 */] <1.1132812f ? 
                    1.1442472f : 
                     (Double.isNaN(data[233]) || data[233 /* C250 */] <-0.0125f ? 
                        0.03170587f : 
                        -1.1287179f)) : 
                 (Double.isNaN(data[216]) || data[216 /* C233 */] <-7.734375f ? 
                    1.187214f : 
                    -0.108751915f))) : 
         (data[9 /* C11 */] <49.5f ? 
             (data[153 /* C169 */] <21.79375f ? 
                -1.1401614f : 
                0.8993132f) : 
             (data[2 /* C4 */] <70.5f ? 
                2.522968f : 
                0.41860667f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class GBM_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_10_class_0.score0(fdata);
  }
}
class GBM_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[148 /* C163 */] <-3.45f ? 
        -1.3359866f : 
         (data[206 /* C223 */] <-14.027344f ? 
            -1.1547283f : 
             (Double.isNaN(data[180]) || data[180 /* C196 */] <-0.34960938f ? 
                 (Double.isNaN(data[4]) || data[4 /* C6 */] <177.5f ? 
                     (data[229 /* C246 */] <0.0640625f ? 
                        -0.71940976f : 
                        0.15536375f) : 
                     (data[206 /* C223 */] <-6.125f ? 
                        -0.19316033f : 
                        1.682299f)) : 
                1.1117233f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class GBM_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_11_class_0.score0(fdata);
  }
}
class GBM_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[37]) || data[37 /* C40 */] <26.0f ? 
         (Double.isNaN(data[242]) || data[242 /* C259 */] <82.61357f ? 
             (data[232 /* C249 */] <23.534374f ? 
                 (Double.isNaN(data[232]) || data[232 /* C249 */] <16.904125f ? 
                     (Double.isNaN(data[145]) || data[145 /* C160 */] <-0.1546875f ? 
                        0.25061026f : 
                        -0.90504706f) : 
                    -1.7139847f) : 
                 (data[215 /* C232 */] <1.6671875f ? 
                    1.7320291f : 
                     (data[187 /* C203 */] <-1.6625f ? 
                        -0.68754965f : 
                        0.34748104f))) : 
            -1.4910744f) : 
         (data[196 /* C213 */] <-1.0978515f ? 
            -0.5443069f : 
             (Double.isNaN(data[215]) || data[215 /* C232 */] <6.178711f ? 
                 (data[209 /* C226 */] <-0.546875f ? 
                    2.0044568f : 
                    0.6475862f) : 
                -0.1441556f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class GBM_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_12_class_0.score0(fdata);
  }
}
class GBM_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[72]) || data[72 /* C77 */] <78.0f ? 
         (Double.isNaN(data[12]) || data[12 /* C14 */] <-99.0f ? 
             (Double.isNaN(data[51]) || data[51 /* C54 */] <44.5f ? 
                 (Double.isNaN(data[111]) || data[111 /* C117 */] <38.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* C9 */] <103.0f ? 
                        -0.17693515f : 
                        0.59709877f) : 
                    -1.0939353f) : 
                0.9784283f) : 
            -0.89287394f) : 
        0.8136523f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class GBM_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_13_class_0.score0(fdata);
  }
}
class GBM_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[5 /* C7 */] <356.5f ? 
         (data[164 /* C180 */] <-0.35195312f ? 
            -1.230924f : 
             (Double.isNaN(data[232]) || data[232 /* C249 */] <41.79844f ? 
                 (Double.isNaN(data[232]) || data[232 /* C249 */] <23.042854f ? 
                    -0.31652746f : 
                    1.1188793f) : 
                -0.72302336f)) : 
         (Double.isNaN(data[225]) || data[225 /* C242 */] <10.844141f ? 
             (data[259 /* C278 */] <8.272656f ? 
                1.0745361f : 
                 (data[120 /* C126 */] <36.5f ? 
                     (Double.isNaN(data[236]) || data[236 /* C253 */] <-3.3359375f ? 
                        -1.2722882f : 
                        -0.20170744f) : 
                     (Double.isNaN(data[173]) || data[173 /* C189 */] <2.9421875f ? 
                        -0.29967207f : 
                        0.6228212f))) : 
             (data[200 /* C217 */] <0.6582031f ? 
                -0.034987126f : 
                1.4440651f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class GBM_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_14_class_0.score0(fdata);
  }
}
class GBM_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[205]) || data[205 /* C222 */] <3.1611328f ? 
         (Double.isNaN(data[118]) || data[118 /* C124 */] <6.5f ? 
             (Double.isNaN(data[27]) || data[27 /* C30 */] <36.5f ? 
                 (Double.isNaN(data[200]) || data[200 /* C217 */] <1.4570312f ? 
                     (Double.isNaN(data[152]) || data[152 /* C168 */] <19.701563f ? 
                        -0.31029284f : 
                        0.640327f) : 
                     (data[42 /* C45 */] <29.5f ? 
                        0.12805301f : 
                        1.4975675f)) : 
                 (Double.isNaN(data[140]) || data[140 /* C153 */] <29.5f ? 
                     (Double.isNaN(data[220]) || data[220 /* C237 */] <2.153125f ? 
                        0.8945602f : 
                        -0.95939803f) : 
                    -1.2872167f)) : 
            0.93925434f) : 
         (data[8 /* C10 */] <57.0f ? 
            0.14635985f : 
            -1.4082112f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class GBM_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_15_class_0.score0(fdata);
  }
}
class GBM_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[156 /* C172 */] <3.24375f ? 
        0.6904271f : 
         (data[162 /* C178 */] <6.1765623f ? 
             (data[245 /* C262 */] <9.103516f ? 
                -1.4108627f : 
                -0.016947933f) : 
             (data[150 /* C166 */] <0.25625f ? 
                1.009891f : 
                 (data[174 /* C190 */] <0.046875f ? 
                     (Double.isNaN(data[192]) || data[192 /* C209 */] <11.646875f ? 
                        -0.111318566f : 
                        0.96306014f) : 
                     (data[119 /* C125 */] <41.5f ? 
                        0.42630965f : 
                        -0.45033953f)))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class GBM_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_16_class_0.score0(fdata);
  }
}
class GBM_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[63]) || data[63 /* C66 */] <50.0f ? 
         (data[148 /* C163 */] <-2.0484376f ? 
            -1.1812804f : 
             (Double.isNaN(data[111]) || data[111 /* C117 */] <38.5f ? 
                 (data[196 /* C213 */] <-3.0164063f ? 
                    0.7808584f : 
                     (Double.isNaN(data[239]) || data[239 /* C256 */] <0.65625f ? 
                        -0.24477506f : 
                        0.45680732f)) : 
                -0.86361164f)) : 
         (Double.isNaN(data[206]) || data[206 /* C223 */] <-6.0539064f ? 
            0.029471884f : 
            1.1891059f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class GBM_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_17_class_0.score0(fdata);
  }
}
class GBM_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[245 /* C262 */] <4.955078f ? 
        -0.7205095f : 
         (data[99 /* C105 */] <13.5f ? 
             (data[225 /* C242 */] <2.8289063f ? 
                -0.18357278f : 
                1.3955512f) : 
             (data[242 /* C259 */] <14.477735f ? 
                 (data[42 /* C45 */] <13.5f ? 
                    -0.4330133f : 
                     (data[192 /* C209 */] <-0.278125f ? 
                        0.3397108f : 
                        1.3696402f)) : 
                 (Double.isNaN(data[183]) || data[183 /* C199 */] <-21.40625f ? 
                     (data[242 /* C259 */] <46.20625f ? 
                        0.38811848f : 
                        -0.27593857f) : 
                     (data[206 /* C223 */] <-5.71875f ? 
                        -1.0459405f : 
                        -0.19144633f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class GBM_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_18_class_0.score0(fdata);
  }
}
class GBM_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[37]) || data[37 /* C40 */] <26.0f ? 
         (Double.isNaN(data[225]) || data[225 /* C242 */] <10.844141f ? 
             (data[241 /* C258 */] <2.6710937f ? 
                 (data[219 /* C236 */] <-0.05546875f ? 
                    1.0186957f : 
                    -0.51989114f) : 
                 (data[163 /* C179 */] <22.140625f ? 
                    -1.2449179f : 
                     (data[171 /* C187 */] <-0.46875f ? 
                        0.7079911f : 
                        -0.4782325f))) : 
             (Double.isNaN(data[205]) || data[205 /* C222 */] <2.234375f ? 
                0.8446378f : 
                -0.32527813f)) : 
         (Double.isNaN(data[170]) || data[170 /* C186 */] <0.54960936f ? 
             (data[210 /* C227 */] <-0.225f ? 
                0.52067494f : 
                -0.39391583f) : 
             (data[229 /* C246 */] <0.1484375f ? 
                0.17150266f : 
                1.2934157f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class GBM_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += GBM_Tree_19_class_0.score0(fdata);
  }
}
class GBM_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[216 /* C233 */] <-14.440381f ? 
         (Double.isNaN(data[203]) || data[203 /* C220 */] <1.1458985f ? 
            0.120731376f : 
            -1.0982487f) : 
         (Double.isNaN(data[203]) || data[203 /* C220 */] <1.2489258f ? 
             (Double.isNaN(data[223]) || data[223 /* C240 */] <0.653125f ? 
                 (Double.isNaN(data[260]) || data[260 /* C279 */] <35.228127f ? 
                     (data[236 /* C253 */] <-6.3078127f ? 
                        0.5058596f : 
                        -0.36099336f) : 
                     (data[239 /* C256 */] <0.5390625f ? 
                        -0.017440796f : 
                        1.3551934f)) : 
                 (Double.isNaN(data[250]) || data[250 /* C268 */] <26.954687f ? 
                     (data[250 /* C268 */] <6.6563473f ? 
                        -0.7086304f : 
                        0.30300206f) : 
                    -0.9570023f)) : 
            0.94686836f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


